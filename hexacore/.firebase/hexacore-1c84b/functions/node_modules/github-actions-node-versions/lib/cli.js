"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.cli = void 0;
const meow_1 = __importDefault(require("meow"));
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const globby_1 = __importDefault(require("globby"));
const github_actions_node_versions_js_1 = require("./github-actions-node-versions.js");
exports.cli = meow_1.default(`
    Usage
      $ github-actions-node-versions
 
    Options
        --githubDir     path to .github dir (default: {cwd}/.github)
 
    Examples
      $ github-actions-node-versions
`, {
    flags: {
        githubDir: {
            type: "string",
            default: path.join(process.cwd(), ".github")
        }
    },
    autoHelp: true,
    autoVersion: true
});
const run = async (_input = exports.cli.input, flags = exports.cli.flags) => {
    const workflows = await globby_1.default(flags.githubDir.split(path.sep).join("/") + "/workflows/*.{yml,yaml}");
    const workflowContents = await Promise.all(workflows.map((workflowFilePath) => fs.readFile(workflowFilePath, "utf-8")));
    const transformContents = await Promise.all(workflowContents.map((workflowContent) => github_actions_node_versions_js_1.updateNodeVersions(workflowContent)));
    await Promise.all(transformContents.map((transformContent, index) => {
        if (transformContent !== workflowContents[index]) {
            return fs.writeFile(workflows[index], transformContent, "utf-8");
        }
        return Promise.resolve();
    }));
    return {
        stdout: null,
        stderr: null,
        exitStatus: 0
    };
};
exports.run = run;
//# sourceMappingURL=cli.js.map