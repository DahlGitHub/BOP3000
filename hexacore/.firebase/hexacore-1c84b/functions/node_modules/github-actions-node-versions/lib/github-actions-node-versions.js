"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateNodeVersions = void 0;
const yaml_1 = __importDefault(require("yaml"));
// @ts-ignore
const node_version_alias_1 = __importDefault(require("node-version-alias"));
const semver_1 = __importDefault(require("semver"));
const major = (version) => {
    const parse = semver_1.default.parse(version);
    if (!parse || !parse.major) {
        throw new Error("Can not parse");
    }
    return parse.major;
};
const updateNodeVersions = async (yamlString) => {
    const doc = yaml_1.default.parseDocument(yamlString);
    const active = major(await node_version_alias_1.default("stable"));
    const currentLts = major(await node_version_alias_1.default("lts"));
    const previousLts = major(await node_version_alias_1.default("lts/-2"));
    const versions = (() => {
        // active is lts
        if (active === currentLts) {
            return [currentLts, previousLts];
        }
        if (active % 2 !== 0) {
            // remove unstable active
            return [currentLts, previousLts];
        }
        return [active, currentLts, previousLts];
    })().sort();
    let result = yamlString;
    yaml_1.default.visit(doc, {
        Pair(_, pair) {
            if (pair.key.value !== "matrix") {
                return;
            }
            const value = pair.value;
            const nodePair = value.items.find((item) => {
                const value = item.key.value;
                return value === "node" || value === "node_version" || value === "node-version";
            });
            if (!nodePair) {
                return;
            }
            const valueNode = nodePair.value;
            if (valueNode.items.length < 2) {
                return; // should be matrix
            }
            const startIndex = valueNode.range[0];
            const endIndex = valueNode.range[1];
            result = result.slice(0, startIndex) + `[ ${versions.join(", ")} ]` + result.slice(endIndex);
        }
    });
    return result;
};
exports.updateNodeVersions = updateNodeVersions;
//# sourceMappingURL=github-actions-node-versions.js.map